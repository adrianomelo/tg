/*
 * Copyright (C) 2003, University of Manchester
 *
 * Modifications to the initial code base are copyright of their
 * respective authors, or their employers as appropriate.  Authorship
 * of the modifications may be determined from the ChangeLog placed at
 * the end of this file.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.

 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.

 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

package org.semanticweb.owl.model; // Generated package name

import java.net.URI;
import java.util.Set;
import java.util.Map;

/**
 * An individual object. Each individual has a description and
 * possibly an identifier. As with other examples of {@link OWLEntity OWLEntity}, information about the OWLIndividual is held w.r.t. a
 * particular {@link OWLOntology OWLOntology}, and requests for
 * information about an OWLIndividual should be made in the context of
 * an ontology or set of ontologies.  <br/> Methods relating to
 * property values return a {@link Map Map}. This map will be keyed on
 * the appropriate {@link OWLProperty OWLProperty} (e.g. {@link
 * OWLObjectProperty OWLObjectProperty} or {@link OWLDataProperty OWLDataProperty}. As OWLIndividuals can have multiple values
 * for each property, the values in the Map are {@link Set Set}s of
 * the appropriate object (e.g. OWLIndividual or {@link OWLDataValue OWLDataValue}).
 *
 * @author Sean Bechhofer
 * @version $Id: OWLIndividual.java,v 1.4 2006/03/28 16:14:45 ronwalf Exp $ 
 */

public interface OWLIndividual extends OWLEntity 
{
    /** Indicates whether the individual is anonymous or not. The
     * whole issue of anonymous individuals will need particular
     * thought and probably refactoring....*/
    public boolean isAnonymous() throws OWLException;
    
    // ANON: get the anonymous id URI
    /** Return the URI that identifies this anonymous individuals. These
     *  URI's are generated by the underlying RDF parser. 
     */
    public URI getAnonId();
    // ===

    /** Returns a list of the {@link OWLDescription OWLDescription}s that
     * this individual is asserted as being an instance of in the given ontology. */ 
    public Set getTypes( OWLOntology o ) throws OWLException;

    /** Returns a list of the {@link OWLDescription OWLDescription}s that
     * this individual is asserted as being an instance of in the given ontologies. */ 
    public Set getTypes( Set ontologies ) throws OWLException;
  
    /** Returns a {@link Map Map} which encapsulates the relationships
     * between this individual and other individuals in the given
     * ontology. See above for notes about the maps. */
    public Map getObjectPropertyValues( OWLOntology o ) throws OWLException;

    /** Returns a {@link Map Map} which encapsulates the relationships
     * between this individual and other individuals in the given
     * ontology. See above for notes about the maps. */
    public Map getObjectPropertyValues( Set ontologies ) throws OWLException;
    
    /** Returns a {@link Map Map} which encapsulates the relationship
    between this individual and data values in the given ontology. See
    above for notes about the maps. */
    public Map getDataPropertyValues( OWLOntology o ) throws OWLException; 

    /** Returns a {@link Map Map} which encapsulates the relationship
    between this individual and data values in the given
    ontologies. See above for notes about the maps. */
    public Map getDataPropertyValues( Set ontologies ) throws OWLException; 

    /** Returns a {@link Map Map} which encapsulate the relationships
     * between other individuals and this individual in the given
     * ontology. This is useful if we want to check properties of the
     * individual graphs, for example to check that anonymous
     * individuals are only involved in tree structures. See above for
     * notes about the maps. */
    public Map getIncomingObjectPropertyValues( Set ontologies ) throws OWLException;

    /** Returns a {@link Map Map} which encapsulate the relationships
     * between other individuals and this individual in the given
     * ontology. This is useful if we want to check properties of the
     * individual graphs, for example to check that anonymous
     * individuals are only involved in tree structures. See above for
     * notes about the maps. */
    public Map getIncomingObjectPropertyValues( OWLOntology o ) throws OWLException;
    

}// OWLIndividual


/*
 * ChangeLog
 * $Log: OWLIndividual.java,v $
 * Revision 1.4  2006/03/28 16:14:45  ronwalf
 * Merging mindswap changes to OWLApi.
 * Rough summary:
 * * 1.5 compatibility (rename enum variables)
 * * An option to turn on and off importing in OWLConsumer
 * * Bug fix to allow DataRange in more areas
 * * Giving Anonymous individuals an identifier
 *   * New factory method - getAnonOWLIndividual
 *   * getOWLIndividual no longer accepts 'null'
 *   * added getAnonId() and isAnon() to OWLIndividual
 * * Some work on the RDF serializer, but we have a complete rewrite in
 *   Swoop that I think is better (more flexible, results easier to read)
 * * Added Transitive, Functional, InverseFunctional, Inverse, and
 *   Symmetric PropertyAxioms (not sure why, will check)
 * * Added .equals and .hashcode for all OWLObjects
 * * Added a RemoveDataType change
 * * Patches to OntologyImpl for Entity removal
 * * Added OWLIndividualTypeAssertion
 * * Added OWL(Object|Data)Property(Domain|Range)Axiom
 * * Added OWL(Object|Data)PropertyInstance
 * * Added subclass index to OWLClassImpl (and getSubClasses(...) for
 *   OWLClass)
 * * Changes for Entity renaming
 *
 * Revision 1.3  2005/06/10 12:20:29  sean_bechhofer
 * Housekeeping license information to consistent LGPL.
 *
 * Revision 1.2  2004/07/09 12:07:45  sean_bechhofer
 * Addition of functionality to access usage, e.g. where classes, properties etc
 * are used within the ontology.
 *
 * Revision 1.1.1.1  2003/10/14 17:10:08  sean_bechhofer
 * Initial Import
 *
 * Revision 1.8  2003/10/02 14:33:05  bechhofers
 * Removal of blind methods from Ontology objects.
 *
 * Revision 1.7  2003/05/27 08:43:57  seanb
 * Some name changes, introduction of DL/Lite ontologies.
 *
 * Revision 1.6  2003/05/09 17:34:38  seanb
 * Additional validation. Extending accessors to cover multiple ontologies.
 *
 * Revision 1.5  2003/05/08 07:54:34  seanb
 * Some changes to the visitor hierarchies
 * Addition of datatypes
 * Fixing validation errors relating to top level intersections
 * Improved rendering (including subproperties)
 * Adding FaCT rendering
 *
 * Revision 1.4  2003/03/31 16:55:12  seanb
 * Various updates and fixes to parser.
 * Adding inverses, domain and range.
 *
 * Revision 1.3  2003/03/27 19:51:54  seanb
 * Various changes.
 *
 * Revision 1.2  2003/01/29 16:10:51  seanb
 * Changes to support Anonymous Individuals.
 *
 * Revision 1.1  2003/01/29 14:30:18  seanb
 * Initial Checkin
 *
 * 
 */

